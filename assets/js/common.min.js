var BigEditableTable, EditableTable, FirstGraphArray1, FirstGraphArray2, SecondGraphArray, bidEditableTable, currentFile, editableTable, getFirstGraph, getSecondGraph, hasJob, hasSparklines, isDashboard, isHoveredDashboard, isJobsPage, isPackagesPage, myDropzone, paginationJobs, paginationTable, removedFilesCounter,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

(function($) {
  return $.fn.exists = function() {
    if (this.length > 0) {
      return true;
    } else {
      return false;
    }
  };
})(jQuery);

hasJob = $('.table .job-table tbody') != null ? true : false;

hasSparklines = $('.sparklines').exists();

isJobsPage = $('#jobs_page').exists();

isPackagesPage = $('#packages_form').exists();

FirstGraphArray1 = [];

FirstGraphArray2 = [];

SecondGraphArray = [];

removedFilesCounter = 0;

isDashboard = false;

if ($('#sparkline5').exists()) {
  isDashboard = true;
}

isHoveredDashboard = false;

if ($('.click-action.animated').exists()) {
  $('.click-action.animated').hover(function() {
    return isHoveredDashboard = true;
  }, function() {
    return isHoveredDashboard = false;
  });
}

currentFile = '';


/*
  Hide or show element with custom animation from animateCss
  @param animationFunctionIn string function to show element
  @param animationFunctionOut function to hide element
  @return void
 */

(function($) {
  return $.fn.hideOrShow = function(animationFunctionIn, animationFunctionOut) {
    var popUpWindow;
    popUpWindow = $(this);
    if (!popUpWindow.hasClass(animationFunctionIn)) {
      popUpWindow.changeZIndex('1');
      popUpWindow.addClass(animationFunctionIn);
      return popUpWindow.removeClass(animationFunctionOut);
    } else {
      popUpWindow.changeZIndex('-1');
      popUpWindow.addClass(animationFunctionOut);
      return popUpWindow.removeClass(animationFunctionIn);
    }
  };
})(jQuery);


/*
  Function scroll to element
  @param jQuery object type
 */

(function($) {
  return $.fn.scrollToElement = function(jobDetails) {
    var positionOfElementToScroll;
    positionOfElementToScroll = jobDetails.offset().top - 80;
    return $("body").animate({
      scrollTop: positionOfElementToScroll
    }, 600);
  };
})(jQuery);


/*
  Easy zIndex changing function
  @param zIndex sting index to set for current element
 */

(function($) {
  return $.fn.changeZIndex = function(zIndex) {
    return $(this).css('z-index', zIndex);
  };
})(jQuery);


/*
  Animate element with sending animations parameters
  uses only if it's child element of $this
  @element string element to find as a child
  @param animationFunctionIn string function to show element
  @param animationFunctionOut function to hide element
  @return void
  @use hideOrShow() function
 */

(function($) {
  return $.fn.animateElement = function(element, animationFunctionIn, animationFunctionOut) {
    return $(this).click(function() {
      var popUpWindow;
      popUpWindow = $(this).parent().parent().find(element);
      return popUpWindow.hideOrShow(animationFunctionIn, animationFunctionOut);
    });
  };
})(jQuery);


/*
  Hide element if click was outside of him
  @param elementToSearch string with ". or #" element which click hide function automatic
  @param elementToHide string with ". or #" element which would be hidden after success
  @param functionToHide string animation function OUT
  @param classToRemove string with "." class removed after success
 */

(function($) {
  return $.fn.hideElementOnOutsideClick = function(elementToSearch, elementToHide, functionToHide, classToRemove) {
    var self;
    self = $(this);
    elementToSearch = elementToSearch;
    elementToHide = elementToHide;
    functionToHide = functionToHide;
    classToRemove = classToRemove;
    return self.on('click', function(event) {
      if (event.target.className !== elementToSearch && !isHoveredDashboard) {
        return $(elementToHide).addClass(functionToHide).changeZIndex('-1').removeClass(classToRemove);
      }
    });
  };
})(jQuery);


/*
  Function specific for Jobs table  extend table on element clicked
  @param event type event
 */

(function($) {
  return $.fn.maximazeMinimazeTable = function(event) {
    var divToSearch, jobDetails, jobDetailsHeight, self, trToExpand, wrapper;
    event.preventDefault();
    self = $(this);
    divToSearch = self.parents('td');
    trToExpand = divToSearch.parent('tr');
    wrapper = trToExpand.find('.bmn-overlay--wrapper').toggleClass('active');
    jobDetails = divToSearch.find('.job-details');
    jobDetailsHeight = jobDetails.height();
    wrapper.height(jobDetailsHeight + 80 + "px");
    trToExpand.css('height', jobDetailsHeight + 80 + 'px');
    self.scrollToElement(jobDetails);
    if (!wrapper.hasClass('active')) {
      wrapper.css('height', '0');
      return trToExpand.height("20px");
    }
  };
})(jQuery);

(function($) {
  return $.fn.changeImageAndLink = function(elementWhereChange) {
    var frameID, imageUrl, imageWrapper, renderTime, self, td;
    self = $(this);
    imageWrapper = self.parents('tr.to-expand').find('.full-image-wrapper');
    td = self.find('td');
    frameID = self.find('td').eq(0).text();
    imageUrl = td.attr('data-image-url');
    renderTime = self.find('td').eq(5).text();
    imageWrapper.css('background-image', "url('" + imageUrl + "')");
    imageWrapper.find('.frame-text').text("Frame: " + frameID);
    imageWrapper.find('a.pop-up--image').attr('href', imageUrl);
    imageWrapper.find('.render-time').text('Render Time: ' + renderTime);
    console.dir(frameID);
    console.dir(imageUrl);
    return console.dir(imageWrapper);
  };
})(jQuery);

(function($) {
  return $.fn.overrideBudget = function() {
    var budgetInput, self, wrapper;
    self = $(this);
    wrapper = self.parent('.budget');
    budgetInput = wrapper.find('.job-budget-input');
    if (budgetInput.attr('disabled')) {
      return budgetInput.removeAttr('disabled');
    } else {
      return budgetInput.attr('disabled', 'disabled');
    }
  };
})(jQuery);

(function($) {
  $.fn.bmnSparklineFirst = function(array1, array2) {
    var data, self;
    if (!hasSparklines) {
      return;
    }
    self = $(this);
    data = self.data('sparckline');
    if (data !== void 0) {
      array1 = data;
    }
    console.dir(array1 + "this data");
    $(self).sparkline(array1, {
      type: 'line',
      width: $(self).width(),
      height: '165',
      chartRangeMax: 50,
      lineColor: '#3bafda',
      fillColor: 'rgba(59,175,218,0.3)',
      highlightLineColor: 'rgba(0,0,0,.1)',
      highlightSpotColor: 'rgba(0,0,0,.2)'
    });
    return $(self).sparkline(array2, {
      type: 'line',
      width: $(self).width(),
      height: '165',
      chartRangeMax: 40,
      lineColor: '#5d9cec',
      fillColor: 'rgba(93, 156, 236, 0.3)',
      composite: true,
      highlightLineColor: 'rgba(0,0,0,.1)',
      highlightSpotColor: 'rgba(0,0,0,.2)'
    });
  };
  return $.fn.bmnSparklineSecond = function(array1) {
    var self;
    if (!hasSparklines) {
      return;
    }
    self = $(this);
    return $(self).sparkline(array1, {
      type: 'bar',
      height: '165',
      barWidth: '10',
      barSpacing: '3',
      barColor: '#3bafda'
    });
  };
})(jQuery);

FirstGraphArray1 = [];

FirstGraphArray2 = [];

SecondGraphArray = [];

if (hasSparklines) {
  getFirstGraph = function() {
    return $.get('includes/json.php', {
      "graph": "1"
    }).done(function(data) {
      var parsed;
      console.dir(data);
      parsed = $.parseJSON(data);
      console.dir(parsed);
      FirstGraphArray1 = parsed.array1;
      FirstGraphArray2 = parsed.array2;
      return $('#sparkline5').bmnSparklineFirst(parsed.array1, parsed.array2);
    });
  };
  getSecondGraph = function() {
    return $.get('includes/json.php', {
      "graph": "2"
    }).done(function(data) {
      var parsed;
      console.dir(data);
      parsed = $.parseJSON(data);
      console.dir(parsed);
      SecondGraphArray = parsed.array1;
      return $('#sparkline6').bmnSparklineSecond(parsed.array1);
    });
  };
  getFirstGraph();
  getSecondGraph();
  if (hasJob === true) {
    setInterval(getSecondGraph, 30000);
  }
  setInterval(getFirstGraph, 30000);
}

(function($) {
  $.fn.workWithTable = function(file) {
    var $row, actions, extensionName, numberOfRows, self;
    self = $(this);
    numberOfRows = $('#upload-table-body').find('tr').size();
    actions = ['<a href="#" class="package-button save hidden on-editing save-row"><span class="action-button"><i class="fa fa-save"></i></span></a>', '<a href="#" class="package-button cancel hidden on-editing cancel-row"><span class="action-button delete-button"><i class="fa fa-times"></i></span></a>', '<a href="#" class="package-button edit on-default edit-row"><span class="action-button"><i class="fa fa-pencil"></i></span></a>', '<a href="#" class="package-button delete-job remove-row on-default"><span class="action-button delete-button"><i class="ti-trash"></i></span></a>'].join(' ');
    extensionName = file.name;
    extensionName = extensionName.substring(0, extensionName.indexOf('.'));
    editableTable.datatable.row.add(["" + numberOfRows, "" + file.name, "" + extensionName, actions]).draw();
    $row = $('#upload-table-body').find('tr').each(function() {
      self = $(this);
      self.find('td:last').addClass('actions');
      self.find('td:first').addClass('actions');
      return self.find('td').eq(1).addClass('actions');
    });
    if (file.name !== 'm') {
      return $('#packages-upload').slideDown(300);
    }
  };
  $.fn.changeValueOnClick = function(tableToFind, paramToCheck) {
    var input;
    input = $(this);
    if ($(tableToFind).exists()) {
      return $(tableToFind).find('tr').each(function() {
        var oldValue, self, value;
        self = $(this);
        value = input.val();
        oldValue = editableTable.datatable.cell(self.find('td').eq(1)).data();
        oldValue = oldValue.substr(0, oldValue.indexOf('.'));
        if ($(paramToCheck + ':checked').size() > 0) {
          value = value + '_' + oldValue;
          return editableTable.datatable.cell(self.find('td').eq(2)).data(value);
        } else {
          return editableTable.datatable.cell(self.find('td').eq(2)).data(oldValue);
        }
      });
    }
  };
  return $.fn.doAlert = function() {
    return alert(1);
  };
})(jQuery);

EditableTable = (function() {
  function EditableTable(tableId, columnsNumber) {
    this.tableId = tableId;
    this.columnsNumber = columnsNumber;
  }

  EditableTable.prototype.hello = EditableTable.tableId;

  EditableTable.prototype.options = {
    addButton: '#addToTable',
    table: EditableTable.tableId,
    dom: null,
    columns: null,
    paginate: false,
    filter: false,
    info: false,
    pageLength: 5,
    pagingType: "full_numbers",
    dialog: {
      uploadForm: '',
      wrapper: '#dialog',
      cancelButton: '#dialogCancel',
      confirmButton: '#dialogConfirm'
    }
  };

  EditableTable.prototype.initialize = function() {
    this.setVars().build().events();
  };

  EditableTable.prototype.setVars = function() {
    this.$table = $(this.options.table);
    this.$addButton = $(this.options.addButton);
    this.dialog = {};
    this.dialog.$uploadForm = $(this.options.dialog.uploadForm);
    this.dialog.$wrapper = $(this.options.dialog.wrapper);
    this.dialog.$cancel = $(this.options.dialog.cancelButton);
    this.dialog.$confirm = $(this.options.dialog.confirmButton);
    return this;
  };

  EditableTable.prototype.build = function() {
    var dom;
    dom = "<'row'<'col-sm-6'l><'col-sm-6'f>>" + "<'row'<'col-sm-12'tr>>" + "<'row'<'col-sm-5'i><'col-sm-7'p>>";
    if (this.options.dom != null) {
      dom = this.options.dom;
    }
    this.datatable = this.$table.DataTable({
      'language': {
        'decimal': '',
        'searchPlaceholder': '#',
        'emptyTable': 'No data available in table',
        'info': 'Showing _START_ to _END_ of _TOTAL_ entries',
        'infoEmpty': 'Showing 0 to 0 of 0 entries',
        'infoFiltered': '(filtered from _MAX_ total entries)',
        'infoPostFix': '',
        'thousands': ',',
        'lengthMenu': 'Show _MENU_ entries',
        'loadingRecords': 'Loading...',
        'processing': 'Processing...',
        'zeroRecords': 'No matching records found',
        'paginate': {
          'first': '<<',
          'last': '>>',
          'next': '>',
          'previous': '<'
        }
      },
      'bPaginate': this.options.paginate,
      'pagingType': this.options.pagingType,
      'dom': dom,
      'pageLength': 5,
      'bFilter': this.options.filter,
      "bLengthChange": true,
      "bAutoWidth": false,
      "bProcessing": true,
      'bInfo': this.options.info,
      "lengthMenu": [[5, 10, 15, -1], [5, 10, 15, "All"]],
      'search': {
        'smart': false,
        'regular': '^0$'
      },
      aoColumns: this.options.columns === null ? [
        {
          'width': "5%"
        }, {
          'width': "5%"
        }, {
          'width': "50%"
        }, {
          'width': "5%"
        }
      ] : this.options.columns
    });
    window.dt = this.datatable;
    return this;
  };

  EditableTable.prototype.events = function() {
    var _self;
    _self = this;
    this.$table.on('click', 'a.save-row', function(e) {
      e.preventDefault();
      _self.rowSave($(this).closest('tr'));
    }).on('click', 'a.cancel-row', function(e) {
      e.preventDefault();
      _self.rowCancel($(this).closest('tr'));
    }).on('click', 'a.edit-row', function(e) {
      e.preventDefault();
      _self.rowEdit($(this).closest('tr'));
    }).on('click', 'a.remove-row', function(e) {
      var $row, $table;
      e.preventDefault();
      $row = $(this).closest('tr');
      $table = $(this).closest('tbody');
      _self.dialog.$uploadForm.css('z-index', '999');
      $.magnificPopup.open({
        items: {
          src: _self.options.dialog.wrapper,
          type: 'inline'
        },
        preloader: false,
        modal: true,
        callbacks: {
          change: function() {
            _self.dialog.$confirm.on('click', function(e) {
              var $rowsBeforeRemoving, removeNumber;
              e.preventDefault();
              $rowsBeforeRemoving = $table.find('tr').size();
              _self.rowRemove($row);
              removeNumber = $row.find('td').first().html();
              $(myDropzone.files[removeNumber - 1]._removeLink)[0].click();
              $.magnificPopup.close();
              _self.dialog.$uploadForm.css('z-index', '9999');
              removedFilesCounter++;
              console.dir($table.find('tr').size());
              if ($rowsBeforeRemoving === 1) {
                $table.closest('table').slideUp(300);
              }
            });
          },
          close: function() {
            _self.dialog.$confirm.off('click');
            _self.dialog.$uploadForm.css('z-index', '9999');
          }
        }
      });
    });
    this.$addButton.on('click', function(e) {
      e.preventDefault();
      _self.rowAdd();
    });
    this.dialog.$cancel.on('click', function(e) {
      e.preventDefault();
      $.magnificPopup.close();
    });
    return this;
  };

  EditableTable.prototype.rowAdd = function() {
    var $row, actions, data;
    this.$addButton.attr({
      'disabled': 'disabled'
    });
    actions = void 0;
    data = void 0;
    $row = void 0;
    actions = ['<a href="#" class="hidden on-editing save-row"><i class="fa fa-save"></i></a>', '<a href="#" class="hidden on-editing cancel-row"><i class="fa fa-times"></i></a>', '<a href="#" class="on-default edit-row"><i class="fa fa-pencil"></i></a>', '<a href="#" class="on-default remove-row"><i class="fa fa-trash-o"></i></a>'].join(' ');
    data = this.datatable.row.add(['', '', '', actions]);
    $row = this.datatable.row(data[0]).nodes().to$();
    $row.addClass('adding').find('td:last').addClass('actions');
    this.rowEdit($row);
    this.datatable.order([0, 'asc']).draw();
  };

  EditableTable.prototype.rowCancel = function($row) {
    var $actions, _self, data, i;
    _self = this;
    $actions = void 0;
    i = void 0;
    data = void 0;
    data = this.datatable.row($row.get(0)).data();
    this.datatable.row($row.get(0)).data(data);
    $actions = $row.find('td.actions');
    if ($actions.get(0)) {
      this.rowSetActionsDefault($row);
    }
    this.datatable.draw();
  };

  EditableTable.prototype.rowEdit = function($row) {
    var _self, data;
    _self = this;
    data = void 0;
    data = this.datatable.row($row.get(0)).data();
    $row.children('td').each(function(i) {
      var $this;
      $this = $(this);
      if ($this.hasClass('actions')) {
        _self.rowSetActionsEditing($row);
      } else {
        $this.html('<input type="text" class="form-control input-block" value="' + data[i] + '"/>');
      }
    });
  };

  EditableTable.prototype.rowSave = function($row) {
    var $actions, $td, $tdNewName, _self, values;
    _self = this;
    $actions = void 0;
    values = [];
    $td = $row.find('td:first').text();
    $tdNewName = $row.find('td').eq(2).find('input').val();
    myDropzone.files[$td - 1].newFileName = $tdNewName;
    if ($row.hasClass('adding')) {
      this.$addButton.removeAttr('disabled');
      $row.removeClass('adding');
    }
    values = $row.find('td').map(function() {
      var $this;
      $this = $(this);
      if ($this.hasClass('actions')) {
        _self.rowSetActionsDefault($row);
        return _self.datatable.cell(this).data();
      } else {
        return $.trim($this.find('input').val());
      }
    });
    this.datatable.row($row.get(0)).data(values);
    $actions = $row.find('td.actions');
    if ($actions.get(0)) {
      this.rowSetActionsDefault($row);
    }
    this.datatable.draw();
  };

  EditableTable.prototype.rowRemove = function($row) {
    if ($row.hasClass('adding')) {
      this.$addButton.removeAttr('disabled');
    }
    this.datatable.row($row.get(0)).remove().draw();
  };

  EditableTable.prototype.rowSetActionsEditing = function($row) {
    $row.find('.on-editing').removeClass('hidden');
    $row.find('.on-default').addClass('hidden');
  };

  EditableTable.prototype.rowSetActionsDefault = function($row) {
    $row.find('.on-editing').addClass('hidden');
    $row.find('.on-default').removeClass('hidden');
  };

  return EditableTable;

})();

BigEditableTable = (function(superClass) {
  extend(BigEditableTable, superClass);

  function BigEditableTable() {
    return BigEditableTable.__super__.constructor.apply(this, arguments);
  }

  BigEditableTable.prototype.build = function() {
    this.datatable = this.$table.DataTable({
      'language': {
        'decimal': '',
        'emptyTable': 'No data available in table',
        'info': 'Showing _START_ to _END_ of _TOTAL_ entries',
        'infoEmpty': 'Showing 0 to 0 of 0 entries',
        'infoFiltered': '(filtered from _MAX_ total entries)',
        'infoPostFix': '',
        'thousands': ',',
        'lengthMenu': 'Show _MENU_ entries',
        'loadingRecords': 'Loading...',
        'processing': 'Processing...',
        'zeroRecords': 'No matching records found',
        'paginate': {
          'first': '<<',
          'last': '>>',
          'next': '>',
          'previous': '<'
        }
      },
      'bPaginate': true,
      'bFilter': false,
      'iDisplayLength': 5,
      "bLengthChange": true,
      "bAutoWidth": false,
      'pagingType': 'full_numbers',
      'bInfo': true,
      "lengthMenu": [[5, 10, 15, -1], [5, 10, 15, "All"]],
      aoColumns: [
        null, null, null, null, null, null, null, null, null, null, {
          'bSortable': false,
          'width': '60px'
        }
      ]
    });
    window.dt = this.datatable;
    return this;
  };

  BigEditableTable.prototype.events = function() {
    var _self;
    _self = this;
    this.$table.on('click', 'a.save-row', function(e) {
      e.preventDefault();
      _self.rowSave($(this).closest('tr'));
    }).on('click', 'a.cancel-row', function(e) {
      e.preventDefault();
      _self.rowCancel($(this).closest('tr'));
    }).on('click', 'a.edit-row', function(e) {
      e.preventDefault();
      _self.rowEdit($(this).closest('tr'));
    }).on('click', 'a.remove-row', function(e) {
      var $row;
      e.preventDefault();
      $row = $(this).closest('tr');
      $.magnificPopup.open({
        items: {
          src: _self.options.dialog.wrapper,
          type: 'inline'
        },
        preloader: false,
        modal: true,
        callbacks: {
          change: function() {
            _self.dialog.$confirm.on('click', function(e) {
              e.preventDefault();
              _self.rowRemove($row);
              $.magnificPopup.close();
            });
          },
          close: function() {
            _self.dialog.$confirm.off('click');
          }
        }
      });
    });
    this.$addButton.on('click', function(e) {
      e.preventDefault();
      _self.rowAdd();
    });
    this.dialog.$cancel.on('click', function(e) {
      e.preventDefault();
      $.magnificPopup.close();
    });
    return this;
  };

  return BigEditableTable;

})(EditableTable);

if (isDashboard !== null) {
  editableTable = new EditableTable;
  editableTable.options.table = "#packages-upload";
  editableTable.options.dialog.uploadForm = "#modal-packages";
  editableTable.initialize();
  editableTable.datatable.on('order.dt search.dt delete.dt', function() {
    editableTable.datatable.column(0, {
      search: 'applied',
      "delete": 'applied',
      order: 'applied'
    }).nodes().each(function(cell, i) {
      return cell.innerHTML = i + 1;
    });
    return;
  }).draw();
  bidEditableTable = new BigEditableTable;
  bidEditableTable.options.table = "#datatable-editable-packages";
  bidEditableTable.initialize();
}

if (!isPackagesPage) {
  paginationTable = new EditableTable;
  paginationTable.options.table = ".pagination-table";
  paginationTable.options.columns = [
    {
      'bSearchable': true
    }, {
      'bSearchable': false
    }, {
      'bSearchable': false
    }, {
      'bSearchable': false
    }, {
      'bSearchable': false
    }, {
      'bSearchable': false
    }, {
      'bSearchable': false
    }, {
      'bSearchable': false,
      'bSortable': false
    }
  ];
  paginationTable.options.dom = '<<"row"<".col-sm-5"<".jobs-frames">><"col-sm-7"fl>><t><<"row"<"col-sm-6"i><"col-sm-6"p>>>';
  paginationTable.options.paginate = true;
  paginationTable.options.filter = true;
  paginationTable.options.info = true;
  paginationTable.initialize();
  paginationTable.datatable.iDisplayLength = 5;
  paginationJobs = new EditableTable;
  paginationJobs.options.table = '.jobs-paginate .job-table';
  paginationJobs.options.columns = [
    null, null, null, null, null, null, null, null, null, null, {
      'bSortable': false,
      'width': '100px'
    }
  ];
  paginationJobs.options.dom = "<'row'<'col-sm-6'l><'col-sm-6'f>>" + "<'row'<'col-sm-12'tr>>" + "<'row'<'col-sm-5'i><'col-sm-7'p>>";
  paginationTable.options.filter = false;
  paginationJobs.initialize();
}


/*$('.dataTables_filter input').unbind().bind 'keyup', ->
  searchTerm = @value.toLowerCase()
  regex = '\\b' + searchTerm + '\\b'
  paginationTable.datatable.rows().search(regex, true, false).draw()
  return
 */

$('div').hideElementOnOutsideClick("md md-menu fix-position", '.click-action', 'fadeOut', 'fadeIn');

$('.md.md-menu').animateElement('.click-action', 'fadeIn', 'fadeOut');

$('.openButton').click(function(event) {
  return $(this).maximazeMinimazeTable(event);
});

$('.job-details-closer').click(function(event) {
  return $(this).maximazeMinimazeTable(event);
});

$('.pop-up--image').magnificPopup({
  type: 'image',
  closeOnContentClick: true,
  mainClass: 'mfp-img-mobile',
  image: {
    verticalFit: true
  }
});

$('.job-chart').bmnSparklineFirst();

$(window).resize(function(e) {
  $('.job-chart').bmnSparklineFirst([0, 23, 43, 35, 44, 45, 56, 37, 40]);
  $('#sparkline5').bmnSparklineFirst(FirstGraphArray1, FirstGraphArray2);
  return $('#sparkline6').bmnSparklineSecond(SecondGraphArray);
});

if (isDashboard || isJobsPage) {
  $('.expanded.to-expand').find('.pause-button').click(function(e) {
    var self;
    self = $(this);
    e.preventDefault();
    return self.toggleClass('active');
  });
}

myDropzone = new Dropzone('#dropzone', {
  dictDefaultMessage: "",
  maxFilesize: 99999,
  addRemoveLinks: true,
  autoProcessQueue: false,
  uploadMultiple: false,
  init: function() {
    this.on("addedfile", function(file) {
      this.addName(file);
      return $(this).workWithTable(file);
    });
    this.on("sending", function(file, xhr, formData) {
      var isChecked, newPackagesName;
      newPackagesName = $('#package-name-input').val();
      isChecked = 0;
      if ($('#prefix-checkbox:checked').length > 0) {
        isChecked = 1;
      }
      formData.append("prefix", newPackagesName);
      formData.append("checked", isChecked);
      return formData.append("package_name", file.newFileName);
    });
    this.on("success", function(file, response) {
      return console.dir(response);
    });
    return this.on("uploadprogress", function(file, progress, bytesSent) {
      var fileUploadDate, isChecked, lastModifiedDate, name, prefix, row, rowNumber, value;
      value = file;
      isChecked = 0;
      if (currentFile !== file.name) {
        rowNumber = bidEditableTable.datatable.rows().data().length;
        if ($('#prefix-checkbox:checked').length > 0) {
          isChecked = 1;
        }
        fileUploadDate = new Date();
        lastModifiedDate = new Date(value.lastModified);
        name = value.name;
        name = name.substr(0, name.indexOf('.'));
        if (value.newFileName !== void 0) {
          name = value.newFileName;
        }
        if (isChecked === 1) {
          prefix = $('#package-name-input').val();
          name = prefix + name;
        }
        currentFile = file.name;
        row = bidEditableTable.datatable.row.add(["" + (rowNumber + 1), "" + name, (Math.round(value.size / 1000)) + " KB", "-", "-", "-", "-", (fileUploadDate.getDate()) + "/" + (fileUploadDate.getMonth() + 1) + "/" + (fileUploadDate.getFullYear()), (lastModifiedDate.getDate()) + "/" + (lastModifiedDate.getMonth() + 1) + "/" + (lastModifiedDate.getFullYear()), "<span class='progress-status'>Uploading</span><div class='progress'><div class='progress-bar progress-bar-primary progress-bar-striped active' role='progressbar' aria-valuenow='82' aria-valuemin='0' aria-valuemax='100' style='width: 82%;'><span class='sr-only'>82% Complete</span></div></div>", "<a data-target='#message-info--wrapper' href='#message-info--wrapper' data-toggle='modal' class='package-info'><span class='action-button info-button'><i class='md md-info'></i></span></a> <a class='delete-job remove-row'><span class='action-button delete-button'><i class='ti-trash'></i></span></a>"]).draw();
      }
      $(row.node()).find('td').eq(9).find('div.progress-bar').css('width', Math.round(progress) + '%');
      if (progress >= 99) {
        return $(row.node()).find('td').eq(9).html('<span class="label label-info">Completed</span>');
      }
    });
  }
});

$('#upload-table-body').html('');

$('#package-name-input').on("keyup", function() {
  return $(this).changeValueOnClick('#upload-table-body', '#prefix-checkbox');
});

$('#prefix-checkbox').click(function() {
  return $('#package-name-input').trigger('keyup');
});

$('#upload-table-body').find('tr').click(function() {
  return this.editableTable.rowEdit();
});

$('#select').select2({
  dropdownParent: $('#message-info--wrapper')
});

$('.select2_jobs').select2({
  containerCssClass: "job-margin-left--select2",
  dropdownParent: $('#create-job-modal')
});

$('#package-submit').click(function() {
  var self;
  self = this;
  myDropzone.processQueue();
  $('button.close').trigger('click');
  $('#packages-upload').hide();
  return editableTable.datatable.clear().draw();
});

$('#draft-checkbox').click(function() {
  return $('.pane-content--wrapper').toggleClass('active');
});

$('.job-details tbody').on('click', 'tr', function() {
  var self;
  self = $(this);
  $('.job-details .dataTables_wrapper tbody tr').each(function() {
    return $(this).removeClass('actived');
  });
  if ($(this).hasClass('selected')) {
    return $(this).removeClass('selected');
  } else {
    paginationTable.datatable.$('tr.selected').removeClass('selected');
    $(this).addClass('selected');
    return $(this).changeImageAndLink();
  }
});

$('.budget-checkbox').click(function() {
  return $(this).overrideBudget();
});

if ($('.jobs-frames').exists()) {
  $('.jobs-frames').html('Frames:');
}
